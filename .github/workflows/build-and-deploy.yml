name: Build and Release Arch Image

on: workflow_dispatch
permissions:
  contents: write
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: "Cleanup disk space"
        run: |
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force

          sudo swapoff -a
          sudo rm -f /mnt/swapfile

          sudo apt-get remove -y '^aspnetcore-.*' '^dotnet-.*' '^llvm-.*' 'php.*' '^mongodb-.*' '^mysql-.*' google-chrome-stable microsoft-edge-stable google-cloud-cli powershell azure-cli firefox mono-devel libgl1-mesa-dri --fix-missing

          sudo apt-get autoremove -y
          sudo apt-get clean
          df -h
      
      - name: Install Nix & Podman
        run: |
          bash <(curl -L https://nixos.org/nix/install) --daemon

          source /etc/profile.d/nix.sh
          nix-env -iA nixpkgs.podman
          podman --version
      
      - name: Build Rust project
        run: |
          cd system && cargo build --release && cd -

      - name: Build artifact
        env:
          SYSTEM_USER: ${{ vars.SYSTEM_USER }}
          SYSTEM_PW: ${{ secrets.SYSTEM_PW }}
        run: |
          mkdir -p cache
          podman --version
          source /etc/profile.d/nix.sh
          podman --version
          sudo podman --version 

          podman() {
            sudo $(which podman) $*
          }

          podman --version
          podman build --cap-add ALL --build-context cache=./cache --build-arg SYSTEM_USER=$SYSTEM_USER --build-arg SYSTEM_PW=$SYSTEM_PW -t archbuild .
          podman create --name archbuild --replace archbuild
          podman cp archbuild:/arch.sqfs .
          podman rm archbuild

          mkdir dist
          split --bytes=1G -d arch.sqfs dist/chunk-

          sha256sum arch.sqfs dist/chunk-* > dist/sha256sums.txt

          echo "Successfully built artifact"
      - name: Create Tag
        run: |
          git pull
          TAG=$(date +'%y.%m.%d-%H%M%S')
          echo TAG=$TAG >> $GITHUB_ENV
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ env.TAG }}
          git push origin ${{ env.TAG }}
      
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: Release ${{ env.TAG }}
          files: dist/*
